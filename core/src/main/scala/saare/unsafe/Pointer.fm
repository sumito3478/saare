/*Copyright 2013 sumito3478 <sumito3478@gmail.com>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
 */
package saare
package unsafe

import saare._, Saare._
import scala.concurrent.util.Unsafe.{ instance => _unsafe }

<#assign integralTypes = ["Byte", "Char", "Short", "Int", "Long"]>
<#assign floatingTypes = ["Float", "Double"]>

private[saare] class Pointer(val p: Long) extends AnyVal {
  def +(n: Long): Pointer = new Pointer(p + n)
  def -(n: Long): Pointer = new Pointer(p - n)
  def <=(x: Pointer) = p <= x.p
  def <(x: Pointer) = p < x.p
  def >=(x: Pointer) = p >= x.p
  def >(x: Pointer) = p > x.p
  <#list integralTypes + floatingTypes as type>
  def ${type?lower_case}(buf: Long): ${type} = _unsafe.get${type}(buf + p)
  def ${type?lower_case}(buf: Long, x: ${type}): Unit = _unsafe.put${type}(buf + p, x)
  <#list integralTypes + floatingTypes as arrayType>
  def ${type?lower_case}(buf: Array[${arrayType}]): ${type} = _unsafe.get${type}(buf, p)
  def ${type?lower_case}(buf: Array[${arrayType}], x: ${type}): Unit = _unsafe.put${type}(buf, p, x)
  </#list>
  </#list>
  <#list integralTypes as type>
  <#if type != "Byte" && type != "Char">
  def ${type?lower_case}LE(buf: Long): ${type} = ${type?lower_case}(buf).fromLE
  def ${type?lower_case}LE(buf: Long, x: ${type}): Unit = ${type?lower_case}(buf, x.toLE)
  def ${type?lower_case}BE(buf: Long): ${type} = ${type?lower_case}(buf).fromBE
  def ${type?lower_case}BE(buf: Long, x: ${type}): Unit = ${type?lower_case}(buf, x.toBE)
  <#list integralTypes + floatingTypes as arrayType>
  def ${type?lower_case}LE(buf: Array[${arrayType}]): ${type} = ${type?lower_case}(buf).fromLE
  def ${type?lower_case}LE(buf: Array[${arrayType}], x: ${type}): Unit = ${type?lower_case}(buf, x.toLE)
  def ${type?lower_case}BE(buf: Array[${arrayType}]): ${type} = ${type?lower_case}(buf).fromBE
  def ${type?lower_case}BE(buf: Array[${arrayType}], x: ${type}): Unit = ${type?lower_case}(buf, x.toBE)
  </#list>
  </#if>
  </#list>
}